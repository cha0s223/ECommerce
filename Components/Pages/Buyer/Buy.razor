@page "/buyer/buy"
@layout BlazorApp1.Components.Layout.BBLayout
@using BlazorApp1.Service
@using BlazorApp1.Models.Vo
@using BlazorApp1.Components.Shared
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage;
@inject GoodsService GoodsService
@inject CartService CartService
@inject UserStroge userStroge
@inject DialogService DialogService
@inject ProtectedLocalStorage localStorage
<p>Welcome to the Buyer Buy page.</p>
<p>商品列表</p>

<div class="row g-3">
    @foreach (var product in products)
    {
        <ProductCard Product="product" OnAddToCart="AddToCart" CartNum="@GetCartNum(product.Id)" CartNumChanged="@(num => UpdateCartNum(product, num))" />
    }
    <div class="col-6 col-sm-4 col-md-3 col-lg-auto">
        <Button ButtonStyle="ButtonStyle.Circle" Icon="fa-fw fa-solid fa-cubes" @onclick="@ComponentOnClick" style="position: fixed; right: 10px; bottom: 10%;" TooltipText="购物车" TooltipPlacement="Placement.Left" TooltipTrigger="hover" />
    </div>
</div>
@* <div class="card" style="width: 18rem;">
    <img src="@products[i].Img" class="card-img-top" alt="@products[i].Name">
    <div class="card-body">
        <h5 class="card-title">@products[i].Name</h5>
        <p class="card-text">@products[i].Price</p>
        <button class="btn btn-primary" @onclick="() => AddToCart(products[i])">加入购物车</button>
    </div>
</div> *@

@code {
    private List<GoodsVo> products;
    private List<CartItem> cartItems;
    private string userId;
    private string userRole;


    private async Task ComponentOnClick()
    {
        var op = new DialogOption()
                {
                    Title = "购物车",
                    Size = Size.ExtraLarge,
                    BodyContext = cartItems,
                    Component = BootstrapDynamicComponent.CreateComponent<CartList>()
                    // (new Dictionary<string, object?>()
                    // {
                    //   ["CartItems"]= cartItems
                    // }) 
                };
        await DialogService.Show(op);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                var result = await localStorage.GetAsync<List<CartItem>>($"{userId}cartItems");
                cartItems = result.Success ? result.Value : new List<CartItem>();
            }
            catch (Exception e)
            {
                await localStorage.DeleteAsync($"{userId}cartItems");
                cartItems = new List<CartItem>();
            }
            CartService.SetCartItems(cartItems);
            StateHasChanged(); // 通知界面进行刷新
        }
    }

    protected override async Task OnInitializedAsync()
    {
        products = GoodsService.GetGoodsList();
        userId = userStroge.UserId;
        userRole = userStroge.UserRole;

    }



    private async void AddToCart(GoodsVo product)
    {
        CartService.AddToCart(product, 1);
        cartItems = CartService.GetCartItems();
        await SaveCartItems();
        
    }

    private async void RemoveFromCart(int productId)
    {
        CartService.RemoveFromCart(productId);
        cartItems = CartService.GetCartItems();
        await SaveCartItems();

    }

    private async void ClearCart()
    {
        CartService.ClearCart();
        cartItems = CartService.GetCartItems();
        await SaveCartItems();

    }

    private int GetCartNum(int productId)
    {
        if (cartItems == null)
        {
            cartItems = CartService.GetCartItems() ?? new List<CartItem>();
        }
        return cartItems.FirstOrDefault(i => i.ProductId == productId)?.Number ?? 0;

    }

    private async void UpdateCartNum(GoodsVo product, int newNum)
    {
        // 查找购物车中是否已有该商品
        var cartItem = cartItems.FirstOrDefault(i => i.ProductId == product.Id);
        if (cartItem != null)
        {
            if (newNum > 0)
            {
                // 更新数量
                cartItem.Number = newNum;
            }
            else
            {
                // 数量为0，移除商品
                cartItems.Remove(cartItem);
            }
        }
        else if (newNum > 0)
        {
            // 如果购物车中没有该商品且数量大于0，添加新商品
            cartItems.Add(new CartItem
                {
                    ProductId = product.Id,
                    Name = product.Name,
                    Price = product.Price ?? 0,
                    Number = newNum
                });
        }
        await SaveCartItems();

        // 通知界面进行刷新
        StateHasChanged();
    }
    private async Task SaveCartItems()
    {
        await localStorage.SetAsync($"{userId}cartItems", cartItems);
        // StateHasChanged();
    }
}
