@page "/buyer/myorder"
@layout BlazorApp1.Components.Layout.BBLayout
@using BlazorApp1.Service
@using BlazorApp1.Models.Entity
@inject UserStroge userStroge
@inject OrderService orderservice
@inject ILogger<MyOrder> logger
@inject GoodsService goodsService
<h3>MyOrder</h3>
@if (orders.Count>0&& !loading)
{
    @foreach (var order in orders)
    {
        <Card IsCollapsible="true" HeaderText=" 订单号 - " IsShadow="true">
            <HeaderTemplate>
                <span>@order.Id</span>
                <div class="flex-fill">
                </div>
                <span>下单时间 - @order.Time</span>
            </HeaderTemplate>
            <BodyTemplate>
                <Table TItem="SubOrder" Items="@GetOrderDetail(order.Id).Result" IsStriped="true">
                    <TableColumns>
                        <TableColumn @bind-Field="context.Id" Text="子订单号" Visible="false"/>
                        <TableColumn @bind-Field="context.GoodsId" Text="货物名称">
                            <Template Context="value">
                                @orderName[value.Row.GoodsId??1]
                            </Template>
                        </TableColumn>

                        <TableColumn @bind-Field="context.GoodsPrice" Text="货物总价" Formatter="@IntFormatter" />
                    </TableColumns>
                </Table>
                <span style="float:right">订单总计: @orderTotalPrices[order.Id]?.ToString("0.00")</span> <!-- 显示订单总价 -->
            </BodyTemplate>
        </Card>
    }
}else{
    <p>暂无订单</p>
}


@code {
    private string? userId;
    private List<Order> orders;
    private Dictionary<string, double?> orderTotalPrices = new(); // 用于存储每个订单的总价
    private Dictionary<int, string?> orderName = new();
    private bool loading = true;

    protected async override Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        userId = userStroge.UserId;
        orders = await orderservice.GetOrders(userId);

        foreach (var order in orders)
        {
            await GetOrderDetail(order.Id); // 获取订单详情并计算总价
        }
        loading = false;
    }

    public async Task<List<SubOrder>> GetOrderDetail(string orderId)
    {
        List<SubOrder> subOrders = await orderservice.GetSubOrdersList(orderId);
        double? totalPrice = subOrders.Sum(i => i.GoodsPrice);
        orderTotalPrices[orderId] = totalPrice; // 存储订单总价
        subOrders.ForEach(async item =>
        {
            int i = item.GoodsId ?? 1;
            orderName[i]=goodsService.GetGoodsById(i).Name;
        });
        return subOrders;
    }

    private Task<string> IntFormatter(object d)
    {
        var ret = "";
        if (d is TableColumnContext<SubOrder, object?> data && data.Value != null)
        {
            if (data.Value is double val)
            {
                ret = val.ToString("0.00");
            }
        }
        return Task.FromResult(ret);
    }
}
