@page "/register"
@layout BlazorApp1.Components.Layout.Account.RegisterLayout
@using BlazorApp1.Models.Entity
@using System.Diagnostics.CodeAnalysis
@using BlazorApp1.Models.Dto
@using BlazorApp1.Service
@inject ILogger<Register> logger
@inject NavigationManager NavigationManager
@inject UserService userService
@inject MessageService messageService

<div class="login-item login-item-floating">
    <div class="text-center">
        <h4 class="text-dark">用户注册!</h4>
    </div>
    <ValidateForm Model="@userDto" class="text-center" OnValidSubmit="register">
        <FloatingLabel @bind-Value="userDto.Id" DisplayText="账户" TValue="string" IsGroupBox="true" PlaceHolder="userId" />
        <br />
        <FloatingLabel @bind-Value="userDto.Password" DisplayText="密码" TValue="string" type="password" IsGroupBox="true" PlaceHolder="password" />
        <br />
        <FloatingLabel @bind-Value="userDto.Name" DisplayText="姓名" TValue="string" IsGroupBox="true" PlaceHolder="name" />
        <br />
        <FloatingLabel @bind-Value="userDto.Mobile" DisplayText="电话号码" TValue="string" IsGroupBox="true" PlaceHolder="mobile"/>
        <br />
        <FloatingLabel @bind-Value="userDto.Address" DisplayText="收货地址" TValue="string" IsGroupBox="true" PlaceHolder="address" />
        <br />
        <Button Text="注册" Color="Color.Primary" style="width: 50%" ButtonType="ButtonType.Submit"></Button>
        <hr />
        <Button Text="登录" Color="Color.Info" @onclick="getLogin" style="width: 50%"></Button>
    </ValidateForm>
</div>
@code {
    [CascadingParameter]
    [NotNull]
    private UserDto userDto { get; set; } = new UserDto();

    public async Task register(EditContext textcontext)
    {
        User user = new User(
            userDto.Id,
            userDto.Password,
            userDto.Name??"",
            userDto.Mobile,
            userDto.Address
        );
        var result= await userService.AddUser(user);
        if (result)
        {
            try{
                await messageService.Show(new MessageOption()
                    {
                        Content = "注册成功",
                        Icon = "fa-solid fa-circle-info",
                        Color = Color.Success
                    });
                NavigationManager.NavigateTo("/");
            }
            catch (Exception e)
            {
                await messageService.Show(new MessageOption()
                    {
                        Content = "注册信息有误",
                        Icon = "fa-solid fa-circle-info",
                        Color = Color.Danger
                    });
                logger.LogError(e.Message);
            }

        }else{
            await messageService.Show(new MessageOption()
                {
                    Content = "注册失败",
                    Icon = "fa-solid fa-circle-info",
                    Color = Color.Danger
                });
        }

        userDto = new();

    }

    public void getLogin()
    {
        NavigationManager.NavigateTo("/login");
    }
}
